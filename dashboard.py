import h5py
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# -----------------------------
# Paths
# -----------------------------
NEW_IMG_DIR = Path(r"D:\rockfall_ai\data\drone_img\NewData\img")
OVERLAY_DIR = Path(r"D:\rockfall_ai\data\drone_img\NewData\overlay_demo")
OVERLAY_DIR.mkdir(exist_ok=True, parents=True)

# -----------------------------
# Overlay function
# -----------------------------
def overlay_risk(rgb_img, risk_map, alpha=0.4):
    """
    rgb_img: (H,W,3) scaled 0-1
    risk_map: (H,W) integers 0=low,1=medium,2=high
    """
    colors = np.array([
        [0,255,0],   # low
        [255,255,0], # medium
        [255,0,0]    # high
    ], dtype=np.uint8)
    
    color_map = colors[risk_map]
    overlay = (alpha * color_map + (1-alpha) * (rgb_img*255)).astype(np.uint8)
    return overlay

# -----------------------------
# Process only new images
# -----------------------------
for img_path in sorted(NEW_IMG_DIR.glob("*.h5")):
    stem = img_path.stem
    overlay_file = OVERLAY_DIR / f"demo_{stem}.png"

    # Skip if overlay already exists
    if overlay_file.exists():
        continue

    # Load H5 image
    with h5py.File(img_path,"r") as f:
        img = np.array(f.get("img"), dtype=np.float32)

    # Take RGB channels
    img_rgb = img[:, :, :3]
    if img_rgb.max() > 1:
        img_rgb = img_rgb / 255.0

    # -----------------------------
    # Load real risk_map if available
    # -----------------------------
    # Replace this path with your real risk_map location if generated by risk_mapping.py
    risk_map_file = img_path.with_name(f"pred_{stem}.npy")
    if risk_map_file.exists():
        risk_map = np.load(risk_map_file)
    else:
        # Fake risk map for demo
        H, W = img_rgb.shape[:2]
        risk_map = np.zeros((H,W), dtype=np.uint8)
        risk_map[H//4:H//2, W//4:W//2] = 1   # medium risk
        risk_map[H//2:H*3//4, W//2:W*3//4] = 2  # high risk

    # -----------------------------
    # Overlay
    # -----------------------------
    overlay = overlay_risk(img_rgb, risk_map)

    # -----------------------------
    # Save overlay
    # -----------------------------
    plt.imsave(overlay_file, overlay)
    print(f"Saved demo overlay for {stem}")

    # -----------------------------
    # Optional: preview only this new image
    # -----------------------------
    plt.figure(figsize=(6,6))
    plt.imshow(img_rgb)
    plt.imshow(overlay, alpha=0.6)
    plt.axis("off")
    unique, counts = np.unique(risk_map, return_counts=True)
    counts_dict = dict(zip(unique, counts))
    txt = f"Low: {counts_dict.get(0,0)}  Medium: {counts_dict.get(1,0)}  High: {counts_dict.get(2,0)}"
    plt.text(5, 15, txt, color="white", fontsize=10, bbox=dict(facecolor='black', alpha=0.5))
    plt.show()  # only shows the current image
    plt.close()

